[["decis.html", "Capítulo 6 Decisão 6.1 Decisão Simples 6.2 Decisão Completa 6.3 Decisões Encadeadas", " Capítulo 6 Decisão A sequenciação é fundamental na programação, pois permite estabelecer uma sequência adequada de instruções, organizadas para solucionar um problema, ou seja, determina quais dados são necessários e como serão processados, representando, assim, a lógica com a qual resolvemos um problema. Desta maneira, são combinadas as operações de entrada e saída, de computação e de repetição. Mas existem circunstâncias onde, considerados os resultados obtidos pelo programa, um determinado conjunto de instruções não é adequado para realizar uma etapa específica do problema, sendo requerido o uso de outra alternativa diferente para o processamento dos dados, ou seja, existem situações onde o fluxo sequencial de execução não mais atende as necessidades do problema. A decisão é uma habilidade muito importante na programação de computadores, pois oferece uma maneira para escolher quais instruções serão executadas, isto é, permite que, durante a execução do programa, sejam selecionadas as instruções que serão executadas. A decisão ou seleção é realizada mediante a avaliação de uma expressão lógica que representa a condição que o programador estabelece como critério de escolha ou de seleção. O Python oferece a diretiva de decisão if, que oferece várias possibilidades de uso: efetuar uma decisão simples; realizar uma decisão completa; encadear várias decisões. Vejamos cada uma dessas possibilidades. 6.1 Decisão Simples A decisão simples permite selecionar um comando ou um conjunto de comandos para execução, por meio da avaliação de uma expressão lógica, considerada como a condição, cujo resultado determina a execução dos comandos associados. Observe o fluxograma exibido na Figura 6.1. Figura 6.1: Fluxograma da decisão simples A diretiva if é iniciada pela avaliação da condição, que deve ser uma expressão de tipo bool (lógico), ou que possa ser avaliada logicamente. Quando a condição é avaliada como True, os comandos associados são executados sequencialmente; mas quando produz um resultado False, ocorre um desvio e a execução do programa continua com o comando seguinte à diretiva if. Isto significa que se a condição é avaliada como falsa, nenhum dos comandos associados é executado. Podem ser associados um ou mais comandos à diretiva if, desde que indentados de quatro espaços à direita, que é o padrão do Python. Observe que existe um dois-pontos : obrigatório após a condição, tal como nas diretivas while e for. A condição utilizada pelo if pode ser uma expressão aritmética simples, cujo resultado será considerado False apenas quando resultar em zero, ou seja, qualquer valor diferente de zero, positivo ou negativo, é tomado como True. Também são válidas expressões aritméticas combinadas com operadores relacionais, que são consideradas expressões lógicas devido seu resultado de tipo bool, ou expressões compostas, combinando várias expressões aritméticas e relacionais com o uso de operadores lógicos, que também produzem resultado bool. É uma boa prática de programação utilizar como condição indicada no if expressões que resultem o tipo bool, explicitando qualquer comparação desejada, evitando o uso de operações implícitas. Isto traz mais clareza ao código e facilita sua manutenção. Observe o fragmento que segue, onde a variável valor é testada pela diretiva if, isto é, seu conteúdo é avaliado logicamente. Como contém o inteiro 33, um valor não nulo, é considerada True, de maneira que a função print(), associado ao if, é executada, produzindo sua mensagem. valor = 33 if valor: print(&#39;Valor contém&#39;, valor, &#39;que é NÃO NULO&#39;) &gt;&gt;&gt; Valor contém 33 que é NÃO NULO 6.2 Decisão Completa Aqui tratamos do if/else! 6.3 Decisões Encadeadas Aqui tratamos do if/elif/else! "]]
